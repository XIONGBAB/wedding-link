"use strict";var e=require("@csstools/media-query-list-parser"),r=require("@csstools/css-parser-algorithms"),n=require("@csstools/css-tokenizer");function transformMediaFeatureValue(o){if(Array.isArray(o.value)&&e.matchesRatioExactly(o.value)){const e=[];for(let a=0;a<o.value.length;a++){const t=o.value[a];r.isTokenNode(t)&&t.value[0]===n.TokenType.Number?e.push(t):r.isFunctionNode(t)&&"calc"===t.nameTokenValue().toLowerCase()&&e.push(t)}if(2!==e.length)return;const a=e[0],t=o.value.indexOf(a),i=e[1],u=o.value.indexOf(i);if(r.isTokenNode(i)&&i.value[0]===n.TokenType.Number&&0===i.value[4].value)return o.value.splice(t,1,new r.TokenNode([n.TokenType.Number,2147483647..toString(),-1,-1,{value:2147483647,type:n.NumberType.Integer}])),void o.value.splice(u,1,new r.TokenNode([n.TokenType.Number,"1",-1,-1,{value:1,type:n.NumberType.Integer}]));if(r.isTokenNode(a)&&a.value[0]===n.TokenType.Number&&a.value[4].type===n.NumberType.Integer&&r.isTokenNode(i)&&i.value[0]===n.TokenType.Number&&i.value[4].type===n.NumberType.Integer)return;let s,l;if(r.isFunctionNode(a)&&"calc"===a.nameTokenValue().toLowerCase()){if(a.toString().includes(1e5.toString()))return;s=modifyCalc(a)}if(r.isFunctionNode(i)&&"calc"===i.nameTokenValue().toLowerCase()){if(i.toString().includes(1e5.toString()))return;l=modifyCalc(i)}if(r.isTokenNode(a)&&a.value[0]===n.TokenType.Number&&r.isTokenNode(i)&&i.value[0]===n.TokenType.Number){const e=a.value,o=i.value,t=Math.round(1e5*e[4].value),u=Math.round(1e5*o[4].value),p=greatestCommonDivisor(t,u);s=new r.TokenNode([n.TokenType.Number,Math.round(t/p).toString(),-1,-1,{value:Math.round(t/p),type:n.NumberType.Integer}]),l=new r.TokenNode([n.TokenType.Number,Math.round(u/p).toString(),-1,-1,{value:Math.round(u/p),type:n.NumberType.Integer}])}else{if(r.isTokenNode(a)&&a.value[0]===n.TokenType.Number){const e=a.value;s=new r.TokenNode([n.TokenType.Number,Math.round(1e5*e[4].value).toString(),-1,-1,{value:Math.round(1e5*e[4].value),type:n.NumberType.Integer}])}if(r.isTokenNode(i)&&i.value[0]===n.TokenType.Number){const e=i.value;l=new r.TokenNode([n.TokenType.Number,Math.round(1e5*e[4].value).toString(),-1,-1,{value:Math.round(1e5*e[4].value),type:n.NumberType.Integer}])}}return s&&l?(o.value.splice(t,1,s),void o.value.splice(u,1,l)):void 0}const a=Array.isArray(o.value)?o.value:[o.value];for(let e=0;e<a.length;e++){const t=a[e];if(r.isTokenNode(t)){const i=t.value;if(i[0]!==n.TokenType.Number)return;if(i[4].type===n.NumberType.Integer)return a.splice(e+1,0,new r.TokenNode([n.TokenType.Delim,"/",-1,-1,{value:"/"}]),new r.TokenNode([n.TokenType.Number,"1",-1,-1,{value:1,type:n.NumberType.Integer}])),void(o.value=a);if(i[4].type===n.NumberType.Number){const t=Math.round(1e5*i[4].value),u=greatestCommonDivisor(t,1e5);return a.splice(e,1,new r.TokenNode([n.TokenType.Number,Math.round(t/u).toString(),-1,-1,{value:Math.round(t/u),type:n.NumberType.Integer}]),new r.TokenNode([n.TokenType.Delim,"/",-1,-1,{value:"/"}]),new r.TokenNode([n.TokenType.Number,Math.round(1e5/u).toString(),-1,-1,{value:Math.round(1e5/u),type:n.NumberType.Integer}])),void(o.value=a)}return}if(r.isFunctionNode(t)&&"calc"===t.nameTokenValue().toLowerCase())return a.splice(e,1,modifyCalc(t),new r.TokenNode([n.TokenType.Delim,"/",-1,-1,{value:"/"}]),new r.TokenNode([n.TokenType.Number,1e5.toString(),-1,-1,{value:1e5,type:n.NumberType.Integer}])),void(o.value=a)}}function modifyCalc(e){return new r.FunctionNode([n.TokenType.Function,"calc(",-1,-1,{value:"calc("}],[n.TokenType.CloseParen,")",-1,-1,void 0],[new r.SimpleBlockNode([n.TokenType.OpenParen,"(",-1,-1,void 0],[n.TokenType.CloseParen,")",-1,-1,void 0],e.value),new r.WhitespaceNode([[n.TokenType.Whitespace," ",-1,-1,void 0]]),new r.TokenNode([n.TokenType.Delim,"*",-1,-1,{value:"*"}]),new r.WhitespaceNode([[n.TokenType.Whitespace," ",-1,-1,void 0]]),new r.TokenNode([n.TokenType.Number,1e5.toString(),-1,-1,{value:1e5,type:n.NumberType.Integer}])])}function greatestCommonDivisor(e,r){if(Number.isNaN(e)||Number.isNaN(r))throw new Error("Unexpected 'NaN' when calculating the greatest common divisor.");if(!Number.isFinite(e)||!Number.isFinite(r))throw new Error("Unexpected 'Infinite' value when calculating the greatest common divisor.");for(r>e&&([e,r]=[r,e]);;){if(0==r)return e;if(0==(e%=r))return r;r%=e}}const o=new Set(["aspect-ratio","min-aspect-ratio","max-aspect-ratio","device-aspect-ratio","min-device-aspect-ratio","max-device-aspect-ratio"]);function transformMediaQueryList(r,n){const a=e.parse(r,{preserveInvalidMediaQueries:!0,onParseError:()=>{throw new Error(`Unable to parse media query "${r}"`)}}),t=new Set(a.map((e=>e.toString())));return a.flatMap((r=>{if(e.isMediaQueryInvalid(r))return[r.toString()];const a=e.cloneMediaQuery(r);a.walk((r=>{const n=r.node;if(e.isMediaFeaturePlain(n)||e.isMediaFeatureRangeNameValue(n)||e.isMediaFeatureRangeValueName(n)){const e=n.name.getName().toLowerCase();if(!o.has(e))return;transformMediaFeatureValue(n.value)}else if(e.isMediaFeatureRangeValueNameValue(n)){const e=n.name.getName().toLowerCase();if(!o.has(e))return;transformMediaFeatureValue(n.valueOne);transformMediaFeatureValue(n.valueTwo)}else;}));const i=r.toString(),u=a.toString();return u===i||t.has(u)?[i]:n?[i,u]:[u]})).join(",")}const creator=e=>{const r=Object.assign({preserve:!1},e);return{postcssPlugin:"postcss-media-queries-aspect-ratio-number-values",AtRule(e,{result:n}){if("media"!==e.name.toLowerCase())return;const o=e.params.toLowerCase();if(!(o.includes("aspect-ratio")||o.includes("min-aspect-ratio")||o.includes("max-aspect-ratio")||o.includes("device-aspect-ratio")||o.includes("min-device-aspect-ratio")||o.includes("max-device-aspect-ratio")))return;let a=e.params;try{if(a=transformMediaQueryList(e.params,r.preserve),a===e.params)return}catch(r){return void e.warn(n,`Failed to transform @media params for "${e.params}" with message: "${r.message}"`)}e.cloneBefore({params:a}),e.remove()}}};creator.postcss=!0,module.exports=creator;
